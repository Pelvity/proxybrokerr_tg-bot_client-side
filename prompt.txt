package pl.pollub.test;

import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.widget.Toolbar;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                    .replace(R.id.fragment_container, new DrawingFragment())
                    .commit();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_saved_drawings:
                showSavedDrawings();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    public void showSavedDrawings() {
        getSupportFragmentManager().beginTransaction()
                .replace(R.id.fragment_container, new SavedDrawingsFragment())
                .addToBackStack(null)
                .commit();
    }
}


package pl.pollub.test;

import android.graphics.Bitmap;
import android.os.Bundle;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.List;

public class SavedDrawingsFragment extends Fragment {

    private static final List<Bitmap> savedDrawings = new ArrayList<>();
    private RecyclerView recyclerView;

    public static void addDrawing(Bitmap bitmap) {
        savedDrawings.add(bitmap);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_saved_drawings, container, false);
        recyclerView = view.findViewById(R.id.recycler_view);
        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
        recyclerView.setAdapter(new DrawingsAdapter(savedDrawings));
        return view;
    }
}

package pl.pollub.test;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class DrawingSurface extends SurfaceView implements SurfaceHolder.Callback, Runnable {

    private static final String TAG = "DrawingSurface";
    private SurfaceHolder mHolder;
    private Thread mDrawingThread;
    private boolean mIsDrawing;
    private Bitmap mBitmap;
    private Canvas mBitmapCanvas;
    private Paint mPaint;
    private float mX, mY;
    private float mCircleSize = 10.0f;
    private float mLineSize = 5.0f;
    private float startX, startY, endX, endY;
    private boolean isDrawingLine = false;

    public DrawingSurface(Context context, AttributeSet attrs) {
        super(context, attrs);
        mHolder = getHolder();
        mHolder.addCallback(this);
        mPaint = new Paint();
        mPaint.setColor(Color.BLUE);
        mPaint.setStrokeWidth(mLineSize);
        mPaint.setStyle(Paint.Style.STROKE);
        Log.d(TAG, "DrawingSurface initialized");
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        Log.d(TAG, "Surface created");
        mBitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
        mBitmapCanvas = new Canvas(mBitmap);
        startDrawing();
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        Log.d(TAG, "Surface changed");
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        Log.d(TAG, "Surface destroyed");
        stopDrawing();
    }

    private void startDrawing() {
        mIsDrawing = true;
        mDrawingThread = new Thread(this);
        mDrawingThread.start();
        Log.d(TAG, "Drawing thread started");
    }

    private void stopDrawing() {
        mIsDrawing = false;
        try {
            mDrawingThread.join();
            Log.d(TAG, "Drawing thread stopped");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while (mIsDrawing) {
            Canvas canvas = null;
            try {
                canvas = mHolder.lockCanvas();
                synchronized (mHolder) {
                    if (canvas != null) {
                        drawSomething(canvas);
                    }
                }
            } finally {
                if (canvas != null) {
                    mHolder.unlockCanvasAndPost(canvas);
                }
            }
            try {
                Thread.sleep(20); // ~60 FPS
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void drawSomething(Canvas canvas) {
        canvas.drawColor(Color.WHITE); // Clear the background
        canvas.drawBitmap(mBitmap, 0, 0, null); // Draw the bitmap onto the canvas
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                startX = event.getX();
                startY = event.getY();
                isDrawingLine = true;
                break;
            case MotionEvent.ACTION_MOVE:
                endX = event.getX();
                endY = event.getY();
                synchronized (mHolder) {
                    mBitmapCanvas.drawLine(startX, startY, endX, endY, mPaint);
                    startX = endX;
                    startY = endY;
                }
                break;
            case MotionEvent.ACTION_UP:
                endX = event.getX();
                endY = event.getY();
                synchronized (mHolder) {
                    mBitmapCanvas.drawLine(startX, startY, endX, endY, mPaint);
                    // Draw circles at the start and end points
                    mBitmapCanvas.drawCircle(startX, startY, mCircleSize, mPaint);
                    mBitmapCanvas.drawCircle(endX, endY, mCircleSize, mPaint);
                }
                isDrawingLine = false;
                break;
        }
        return true;
    }

    public void setPaintColor(int color) {
        mPaint.setColor(color);
    }

    public void setCircleSize(float circleSize) {
        mCircleSize = circleSize;
    }

    public void setLineSize(float lineSize) {
        mLineSize = lineSize;
        mPaint.setStrokeWidth(mLineSize);
    }

    public void clear() {
        synchronized (mHolder) {
            mBitmap.eraseColor(Color.WHITE);
        }
        invalidate();
    }

    public Bitmap getBitmap() {
        return mBitmap;
    }
}

package pl.pollub.test;

import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;

public class DrawingsAdapter extends RecyclerView.Adapter<DrawingsAdapter.ViewHolder> {

    private List<Bitmap> drawings;

    public DrawingsAdapter(List<Bitmap> drawings) {
        this.drawings = drawings;
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_drawing, parent, false);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        holder.imageView.setImageBitmap(drawings.get(position));
    }

    @Override
    public int getItemCount() {
        return drawings.size();
    }

    static class ViewHolder extends RecyclerView.ViewHolder {
        ImageView imageView;

        ViewHolder(View itemView) {
            super(itemView);
            imageView = itemView.findViewById(R.id.drawing_image);
        }
    }
}

package pl.pollub.test;

import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.SeekBar;
import androidx.fragment.app.Fragment;

public class DrawingFragment extends Fragment {

    private DrawingSurface mDrawingSurface;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_drawing, container, false);
        mDrawingSurface = view.findViewById(R.id.drawing_surface);

        Button redButton = view.findViewById(R.id.color_red);
        Button yellowButton = view.findViewById(R.id.color_yellow);
        Button blueButton = view.findViewById(R.id.color_blue);
        Button greenButton = view.findViewById(R.id.color_green);
        Button clearButton = view.findViewById(R.id.clear_button);
        Button saveButton = view.findViewById(R.id.save_button);
        SeekBar circleSizeSeekBar = view.findViewById(R.id.circle_size_seekbar);

        redButton.setOnClickListener(v -> mDrawingSurface.setPaintColor(Color.RED));
        yellowButton.setOnClickListener(v -> mDrawingSurface.setPaintColor(Color.YELLOW));
        blueButton.setOnClickListener(v -> mDrawingSurface.setPaintColor(Color.BLUE));
        greenButton.setOnClickListener(v -> mDrawingSurface.setPaintColor(Color.GREEN));
        clearButton.setOnClickListener(v -> mDrawingSurface.clear());
        saveButton.setOnClickListener(v -> saveDrawing());

        circleSizeSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                // Set circle size based on seekbar progress
                float newSize = progress + 10; // Ensure minimum size of 10
                mDrawingSurface.setCircleSize(newSize);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                // Do nothing
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                // Do nothing
            }
        });

        return view;
    }

    private void saveDrawing() {
        Bitmap bitmap = mDrawingSurface.getBitmap();
        // Save the bitmap to a file or database
        // For this example, we'll simply add it to a static list
        SavedDrawingsFragment.addDrawing(bitmap);

        // Show saved drawings fragment
        ((MainActivity) getActivity()).showSavedDrawings();
    }
}

activity_main.xml:

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <FrameLayout
        android:id="@+id/fragment_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</RelativeLayout>


fragment_drawing.xml:
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <FrameLayout
        android:id="@+id/fragment_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</RelativeLayout>



fragment_saved_drawings.xml:
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".SavedDrawingsFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</RelativeLayout>

item_drawing.xml:
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical">

    <ImageView
        android:id="@+id/drawing_image"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:scaleType="fitCenter" />
</LinearLayout>



logics of app that should be :
1. user draw image
2. user save image and set name for image
3. image is saving by downloading to phone storage
4. image are adding to menu of images (do like senior dev would do)
5. user is able to delete or modify image 

